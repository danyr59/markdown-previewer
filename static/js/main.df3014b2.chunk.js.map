{"version":3,"sources":["component/Toolbar.js","component/Editor.js","services/marked.js","component/Preview.js","App.js","reportWebVitals.js","index.js"],"names":["Toolbar","props","console","log","clases","className","text","onClick","Editor","id","onChange","type","value","markdown","marked","setOptions","breaks","highlight","code","Prism","languages","javascript","renderer","link","href","title","heading","level","raw","slugger","image","use","Preview","dangerouslySetInnerHTML","__html","App","state","placeholder","editormaximized","previewermaximized","handlerChange","bind","handlerEditorMaximize","handlerPreviewerMaximize","e","this","setState","target","icons","states","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df3014b2.chunk.js","sourcesContent":["import \"../style/Toolbar.scss\";\nconst Toolbar = (props) => {\n  console.log(props.clases);\n  return (\n    <div className=\"w-100 toolbar\">\n      <i className=\"bi bi-droplet-half me-auto p-2 bd-highlight\">\n        {props.text}\n      </i>\n\n      <i className={`${props.clases} p-2 icono`} onClick={props.onClick}></i>\n    </div>\n  );\n};\nexport default Toolbar;\n","import \"../style/Editor.scss\";\nconst Editor = (props) => {\n  return (\n    <div className=\"w-100 h-100\">\n      <textarea\n        className=\"ajuste w-100 width-ajuste\"\n        id=\"editor\"\n        onChange={props.onChange}\n        type=\"text\"\n        value={props.markdown}\n      />\n    </div>\n  );\n};\nexport default Editor;\n","import marked from \"marked/marked.min.js\";\nimport Prism from \"prismjs\";\nimport \"prismjs/themes/prism.css\";\nmarked.setOptions({\n  breaks: true,\n  highlight: (code) => {\n    return Prism.highlight(code, Prism.languages.javascript, \"javascript\");\n  },\n});\n\nconst renderer = {\n  link(href, title, text) {\n    return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n  },\n  heading(text, level, raw, slugger) {\n    return `<h${level} class=\"h${level} border-${level}\">${text}</h${level}>`;\n  },\n  image(href, title, text) {\n    return `<img src=\"${href}\"  class=\"img-fluid\" alt=\"${text}\" >`;\n  },\n};\nconsole.log({ renderer });\nmarked.use({ renderer });\nexport default marked;\n","import \"../style/Preview.scss\";\nimport marked from \"marked/marked.min.js\";\nimport React from \"react\";\nimport \"../services/marked.js\";\n//import \"prismjs/themes/prism.css\";\nconst Preview = (props) => {\n  return (\n    <div\n      className=\" container-fluid negro p-3 ajustes\"\n      id=\"preview\"\n      dangerouslySetInnerHTML={{\n        __html: marked(props.markdown),\n      }}\n    ></div>\n  );\n};\nexport default Preview;\n","import \"./App.css\";\nimport React from \"react\";\nimport Toolbar from \"./component/Toolbar.js\";\nimport Editor from \"./component/Editor.js\";\nimport Preview from \"./component/Preview.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder,\n      editormaximized: false,\n      previewermaximized: false,\n    };\n    this.handlerChange = this.handlerChange.bind(this);\n    this.handlerEditorMaximize = this.handlerEditorMaximize.bind(this);\n    this.handlerPreviewerMaximize = this.handlerPreviewerMaximize.bind(this);\n  }\n  handlerChange(e) {\n    this.setState({\n      markdown: e.target.value,\n    });\n  }\n  handlerEditorMaximize() {\n    this.setState((state) => ({\n      editormaximized: !state.editormaximized,\n    }));\n  }\n  handlerPreviewerMaximize() {\n    this.setState((state) => ({\n      previewermaximized: !state.previewermaximized,\n    }));\n  }\n  render() {\n    let icons = this.state.editormaximized\n      ? \"bi bi-zoom-out\"\n      : this.state.previewermaximized\n      ? \"bi bi-zoom-out\"\n      : \"bi bi-zoom-in\";\n    //handler two states for split\n    //position 0 than handler the editor\n    //position 1 than handler the preview\n    let states = this.state.editormaximized\n      ? [\"editorWrap maximazed\", \"previewWrap d-none\"]\n      : this.state.previewermaximized\n      ? [\"editorWrap d-none\", \"previewWrap maximazed\"]\n      : [\"editorWrap\", \"previewWrap\"];\n    return (\n      <div className=\"App colorScheme\">\n        <div className={`containers ${states[0]}`}>\n          <Toolbar\n            text={\"Editor\"}\n            onClick={this.handlerEditorMaximize}\n            clases={states[0] + \" \" + icons}\n          />\n          <Editor\n            onChange={this.handlerChange}\n            markdown={this.state.markdown}\n          />\n        </div>\n        <div className={`containers ${states[1]}`}>\n          <Toolbar\n            text={\"Previewer\"}\n            onClick={this.handlerPreviewerMaximize}\n            clases={states[1] + \" \" + icons}\n          />\n          <Preview markdown={this.state.markdown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}